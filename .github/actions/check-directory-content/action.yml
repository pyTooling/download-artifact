# The MIT License (MIT)
#
# Copyright ¬© 2024 The pyTooling Authors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
name: Check-Directory-Content
description: Check if directory contains the listed files.
inputs:
  files:
    description: List of filenames.
    type: string

runs:
  using: composite
  steps:
    - name: üìã Verify extracted tarball content
      shell: bash
      run: |
        set +e

        ANSI_LIGHT_RED=$'\x1b[91m'
        ANSI_LIGHT_GREEN=$'\x1b[92m'
        ANSI_NOCOLOR=$'\x1b[0m'

        errors=0
        while IFS=$'\r\n' read -r file; do
          # skip empty or comment lines
          [[ "${file}" == "" || "${file:0:1}" == "#" ]] && continue

          printf "%s" "Checking '${file}' ... "
          if [[ -f "$file" ]]; then
            printf "%s\n" "${ANSI_LIGHT_GREEN}[PASSED]${ANSI_NOCOLOR}"
          else
            printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
            printf "%s\n" "${ANSI_LIGHT_RED}Extracted artifact doesn't contain file '${file}'.${ANSI_NOCOLOR}"
            errors=$((errors + 1))
          fi
        done <<<'${{ inputs.files }}'

        printf "%s\n" ""
        if [[ $errors -ne 0 ]]; then
          printf "%s\n" "${ANSI_LIGHT_RED}Counted ${errors} errors.${ANSI_NOCOLOR}"
          exit 1
        else
          printf "%s\n" "${ANSI_LIGHT_GREEN}No errors found.${ANSI_NOCOLOR}"
        fi
