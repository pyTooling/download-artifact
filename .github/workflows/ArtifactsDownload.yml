# The MIT License (MIT)
#
# Copyright © 2024 The pyTooling Authors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the “Software”), to deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
name: Verification of Preserving Artifact Download

on:
  push:
  workflow_dispatch:

jobs:
  Build-1:
    name: Build 1 - Upload artifact
    runs-on: ubuntu-24.04

    steps:
      - name: 🖉 Build 1
        run: |
          printf "%s\n" "Document 1 $(date --utc '+%d.%m.%Y - %H:%M:%S')"   > document1.txt
          printf "%s\n" "Analysis log $(date --utc '+%d.%m.%Y - %H:%M:%S')" > analysis.log
          printf "%s\n" "Build log $(date --utc '+%d.%m.%Y - %H:%M:%S')"    > build.log

          mkdir -p bin
          printf "%s\n" "Program $(date --utc '+%d.%m.%Y - %H:%M:%S')"   > bin/program.py
          chmod u+x bin/program.py
          printf "%s\n" "Tool $(date --utc '+%d.%m.%Y - %H:%M:%S')"      > bin/tool.py
          chmod g+x bin/tool.py

          mkdir -p lib
          printf "%s\n" "Library $(date --utc '+%d.%m.%Y - %H:%M:%S')"   > lib/common.py
          chmod +x lib/common.py

      - name: 🔎 Inspect directory structure
        run: |
          tree -psh .

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: legacy
          path: |
            document1.txt
            *.log
            bin/
            lib/*.py

      - name: 📤 Upload artifact
        uses: pyTooling/upload-artifact@dev
        with:
          name: release-1
          path: |
            document1.txt
            *.log
            bin/
            lib/*.py
#          if-no-files-found: error
#          retention-days: 1

  Build-2:
    name: Build 2 - Upload artifact
    runs-on: ubuntu-24.04

    steps:
      - name: 🖉 Build 2
        run: |
          printf "%s\n" "Document 1 $(date --utc '+%d.%m.%Y - %H:%M:%S')"   > document1.txt
          printf "%s\n" "Analysis log $(date --utc '+%d.%m.%Y - %H:%M:%S')" > analysis.log
          printf "%s\n" "Build log $(date --utc '+%d.%m.%Y - %H:%M:%S')"    > build.log

          mkdir -p bin
          printf "%s\n" "Program $(date --utc '+%d.%m.%Y - %H:%M:%S')"   > bin/program.py
          chmod u+x bin/program.py
          printf "%s\n" "Tool $(date --utc '+%d.%m.%Y - %H:%M:%S')"      > bin/tool.py
          chmod g+x bin/tool.py

          mkdir -p lib
          printf "%s\n" "Library $(date --utc '+%d.%m.%Y - %H:%M:%S')"   > lib/common.py
          chmod +x lib/common.py

      - name: 🔎 Inspect directory structure
        run: |
          tree -psh .

      - name: 📤 Upload artifact
        uses: pyTooling/upload-artifact@dev
        with:
          name: release-2
          path: |
            document1.txt
            *.log
            bin/
            lib/*.py
#          if-no-files-found: error
#          retention-days: 1

  Verify-1:
    name: Verify 1 - Artifact content
    runs-on: ubuntu-24.04
    needs:
      - Build-1

    steps:
      - name: 📥 Download artifact
        uses: pyTooling/download-artifact@dev
        with:
          name: release-1

      - name: 🔎 Inspect extracted artifact (tarball)
        run: |
          tree -psh .

      - name: 🔎 Inspect cleanup
        run: |
          set +e

          ANSI_LIGHT_RED=$'\x1b[91m'
          ANSI_LIGHT_GREEN=$'\x1b[92m'
          ANSI_NOCOLOR=$'\x1b[0m'

          printf "%s\n" "List directory content"
          ls -lAh .
          printf "%s\n" "----------------------------------------"

          printf "%s" "Was tarball removed ... "
          if [[ -f __pyTooling_upload_artifact__.tar ]]; then
            printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
            printf "%s\n" "${ANSI_LIGHT_RED}Artifact's tarball '__pyTooling_upload_artifact__.tar' still exists.${ANSI_NOCOLOR}"
            exit 1
          else
            printf "%s\n" "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
          fi

      - name: 📋 Verify extracted artifact content
        run: |
          set +e

          ANSI_LIGHT_RED=$'\x1b[91m'
          ANSI_LIGHT_GREEN=$'\x1b[92m'
          ANSI_NOCOLOR=$'\x1b[0m'

          expected=(
            "document1.txt"
            "analysis.log"
            "build.log"
            "bin/program.py"
            "lib/common.py"
          )

          errors=0
          for file in "${expected[@]}"; do
            printf "%s" "Checking '${file}' ... "
            if [[ -f "$file" ]]; then
              printf "%s\n" "${ANSI_LIGHT_GREEN}[PASSED]${ANSI_NOCOLOR}"
            else
              printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
              printf "%s\n" "${ANSI_LIGHT_RED}Extracted artifact doesn't contain file '${file}'.${ANSI_NOCOLOR}"
              errors=$((errors + 1))
            fi
          done

          printf "%s\n" ""
          if [[ $errors -ne 0 ]]; then
            printf "%s\n" "${ANSI_LIGHT_RED}Counted ${errors} errors.${ANSI_NOCOLOR}"
            exit 1
          else
            printf "%s\n" "${ANSI_LIGHT_GREEN}No errors found.${ANSI_NOCOLOR}"
          fi

      - name: 📋 Verify file permissions
        run: |
          set +e

          ANSI_LIGHT_RED=$'\x1b[91m'
          ANSI_LIGHT_GREEN=$'\x1b[92m'
          ANSI_NOCOLOR=$'\x1b[0m'

          expected=(
            "bin/program.py"
            "lib/common.py"
          )

          errors=0
          for file in "${expected[@]}"; do
            printf "%s" "Checking '${file}' ... "
            if [[ -x "$file" ]]; then
              printf "%s\n" "${ANSI_LIGHT_GREEN}[PASSED]${ANSI_NOCOLOR}"
            else
              printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
              printf "%s\n" "${ANSI_LIGHT_RED}File '${file}' isn't executable.${ANSI_NOCOLOR}"
              errors=$((errors + 1))
            fi
          done

          printf "%s\n" ""
          if [[ $errors -ne 0 ]]; then
            printf "%s\n" "${ANSI_LIGHT_RED}Counted ${errors} errors.${ANSI_NOCOLOR}"
            exit 1
          else
            printf "%s\n" "${ANSI_LIGHT_GREEN}No errors found.${ANSI_NOCOLOR}"
          fi

  Verify-2:
    name: Verify 2 - Artifact content in directory
    runs-on: ubuntu-24.04
    needs:
      - Build-2

    steps:
      - name: 📥 Download artifact
        uses: pyTooling/download-artifact@dev
        with:
          name: release-2
          path: myDownload

      - name: 🔎 Inspect extracted artifact (tarball)
        run: |
          tree -psh .

      - name: 🔎 Inspect cleanup
        run: |
          set +e

          ANSI_LIGHT_RED=$'\x1b[91m'
          ANSI_LIGHT_GREEN=$'\x1b[92m'
          ANSI_NOCOLOR=$'\x1b[0m'

          printf "%s\n" "List directory content"
          ls -lAh .
          printf "%s\n" "----------------------------------------"

          printf "%s" "Was tarball removed ... "
          if [[ -f myDownload/__pyTooling_upload_artifact__.tar ]]; then
            printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
            printf "%s\n" "${ANSI_LIGHT_RED}Artifact's tarball 'myDownload/__pyTooling_upload_artifact__.tar' still exists.${ANSI_NOCOLOR}"
            exit 1
          else
            printf "%s\n" "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
          fi

      - name: 📋 Verify extracted artifact content
        run: |
          set +e

          ANSI_LIGHT_RED=$'\x1b[91m'
          ANSI_LIGHT_GREEN=$'\x1b[92m'
          ANSI_NOCOLOR=$'\x1b[0m'

          expected=(
            "myDownload/document1.txt"
            "myDownload/analysis.log"
            "myDownload/build.log"
            "myDownload/bin/program.py"
            "myDownload/lib/common.py"
          )

          errors=0
          for file in "${expected[@]}"; do
            printf "%s" "Checking '${file}' ... "
            if [[ -f "$file" ]]; then
              printf "%s\n" "${ANSI_LIGHT_GREEN}[PASSED]${ANSI_NOCOLOR}"
            else
              printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
              printf "%s\n" "${ANSI_LIGHT_RED}Extracted artifact doesn't contain file '${file}'.${ANSI_NOCOLOR}"
              errors=$((errors + 1))
            fi
          done

          printf "%s\n" ""
          if [[ $errors -ne 0 ]]; then
            printf "%s\n" "${ANSI_LIGHT_RED}Counted ${errors} errors.${ANSI_NOCOLOR}"
            exit 1
          else
            printf "%s\n" "${ANSI_LIGHT_GREEN}No errors found.${ANSI_NOCOLOR}"
          fi

      - name: 📋 Verify file permissions
        run: |
          set +e

          ANSI_LIGHT_RED=$'\x1b[91m'
          ANSI_LIGHT_GREEN=$'\x1b[92m'
          ANSI_NOCOLOR=$'\x1b[0m'

          expected=(
            "myDownload/bin/program.py"
            "myDownload/lib/common.py"
          )

          errors=0
          for file in "${expected[@]}"; do
            printf "%s" "Checking '${file}' ... "
            if [[ -x "$file" ]]; then
              printf "%s\n" "${ANSI_LIGHT_GREEN}[PASSED]${ANSI_NOCOLOR}"
            else
              printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
              printf "%s\n" "${ANSI_LIGHT_RED}File '${file}' isn't executable.${ANSI_NOCOLOR}"
              errors=$((errors + 1))
            fi
          done

          printf "%s\n" ""
          if [[ $errors -ne 0 ]]; then
            printf "%s\n" "${ANSI_LIGHT_RED}Counted ${errors} errors.${ANSI_NOCOLOR}"
            exit 1
          else
            printf "%s\n" "${ANSI_LIGHT_GREEN}No errors found.${ANSI_NOCOLOR}"
          fi

  Verify-3:
    name: Verify 3 - Artifact contents
    runs-on: ubuntu-24.04
    needs:
      - Build-1
      - Build-2

    steps:
      - name: 📥 Download artifact
        uses: pyTooling/download-artifact@dev
        with:
          pattern: release-*
          path: myDownload

      - name: 🔎 Inspect extracted artifact (tarball)
        run: |
          tree -psh .

      - name: 🔎 Inspect cleanup
        run: |
          set +e

          ANSI_LIGHT_RED=$'\x1b[91m'
          ANSI_LIGHT_GREEN=$'\x1b[92m'
          ANSI_NOCOLOR=$'\x1b[0m'

          printf "%s\n" "List directory content"
          ls -lAh .
          printf "%s\n" "----------------------------------------"

          printf "%s" "Was tarball of 'release-1' removed ... "
          if [[ -f myDownload/release-1/__pyTooling_upload_artifact__.tar ]]; then
            printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
            printf "%s\n" "${ANSI_LIGHT_RED}Artifact's tarball 'myDownload/release-1/__pyTooling_upload_artifact__.tar' still exists.${ANSI_NOCOLOR}"
            exit 1
          else
            printf "%s\n" "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
          fi
          printf "%s" "Was tarball of 'release-2' removed ... "
          if [[ -f myDownload/release-2/__pyTooling_upload_artifact__.tar ]]; then
            printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
            printf "%s\n" "${ANSI_LIGHT_RED}Artifact's tarball 'myDownload/release-2/__pyTooling_upload_artifact__.tar' still exists.${ANSI_NOCOLOR}"
            exit 1
          else
            printf "%s\n" "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
          fi

      - name: 📋 Verify extracted artifact content
        run: |
          set +e

          ANSI_LIGHT_RED=$'\x1b[91m'
          ANSI_LIGHT_GREEN=$'\x1b[92m'
          ANSI_NOCOLOR=$'\x1b[0m'

          expected=(
            "myDownload/release-1/document1.txt"
            "myDownload/release-1/analysis.log"
            "myDownload/release-1/build.log"
            "myDownload/release-1/bin/program.py"
            "myDownload/release-1/lib/common.py"
            "myDownload/release-2/document1.txt"
            "myDownload/release-2/analysis.log"
            "myDownload/release-2/build.log"
            "myDownload/release-2/bin/program.py"
            "myDownload/release-2/lib/common.py"
          )

          errors=0
          for file in "${expected[@]}"; do
            printf "%s" "Checking '${file}' ... "
            if [[ -f "$file" ]]; then
              printf "%s\n" "${ANSI_LIGHT_GREEN}[PASSED]${ANSI_NOCOLOR}"
            else
              printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
              printf "%s\n" "${ANSI_LIGHT_RED}Extracted artifact doesn't contain file '${file}'.${ANSI_NOCOLOR}"
              errors=$((errors + 1))
            fi
          done

          printf "%s\n" ""
          if [[ $errors -ne 0 ]]; then
            printf "%s\n" "${ANSI_LIGHT_RED}Counted ${errors} errors.${ANSI_NOCOLOR}"
            exit 1
          else
            printf "%s\n" "${ANSI_LIGHT_GREEN}No errors found.${ANSI_NOCOLOR}"
          fi

      - name: 📋 Verify file permissions
        run: |
          set +e

          ANSI_LIGHT_RED=$'\x1b[91m'
          ANSI_LIGHT_GREEN=$'\x1b[92m'
          ANSI_NOCOLOR=$'\x1b[0m'

          expected=(
            "myDownload/release-1/bin/program.py"
            "myDownload/release-1/lib/common.py"
            "myDownload/release-2/bin/program.py"
            "myDownload/release-2/lib/common.py"
          )

          errors=0
          for file in "${expected[@]}"; do
            printf "%s" "Checking '${file}' ... "
            if [[ -x "$file" ]]; then
              printf "%s\n" "${ANSI_LIGHT_GREEN}[PASSED]${ANSI_NOCOLOR}"
            else
              printf "%s\n" "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
              printf "%s\n" "${ANSI_LIGHT_RED}File '${file}' isn't executable.${ANSI_NOCOLOR}"
              errors=$((errors + 1))
            fi
          done

          printf "%s\n" ""
          if [[ $errors -ne 0 ]]; then
            printf "%s\n" "${ANSI_LIGHT_RED}Counted ${errors} errors.${ANSI_NOCOLOR}"
            exit 1
          else
            printf "%s\n" "${ANSI_LIGHT_GREEN}No errors found.${ANSI_NOCOLOR}"
          fi

  Verify-legacy:
    name: Verify legacy upload
    runs-on: ubuntu-24.04
    needs:
      - Build-1

    steps:
      - name: 📥 Download artifact
        uses: pyTooling/download-artifact@dev
        with:
          name: legacy

      - name: 🔎 Inspect artifact content
        run: |
          tree .
